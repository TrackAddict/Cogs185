numStates = 3;
numObservationLabels = 5;

all_samples = zeros(numObservationLabels,size(100:127,2));
correctness = zeros(1,size(100:127,2));

for t = 100:127
    
    %Run [PSTATES, logpseq, Forward, Backward, scale] = hmmdecode(seq, TRANS_HAT, EMIS_HAT) to estimate the Forward probabilities Pt_1 P(Zt?1|Xt?101, ..., Xt?1). Note that Xt?101, ..., Xt?1 are the ground truth observations. get probability distribution prediction for Zt at t=T-1
    %hints:
    %1) the input groundtruth observations: price_change(t-100+1: t)
    %2) The Forward probabilities then can be retrived by
    
    %=====================A PLACEHOLDER FOR YOUR CODE========================================
    
    
    [PSTATES, logpseq, Forward, Backward, scale] = hmmdecode(train_set, TRANS_HAT, EMIS_HAT);
    
    PZt_1 = Forward(:, 101);

    %use transition matrix to get distribution for PZt
    %hints:
    %PZt = dot product of your transition matrix and PZt_1
    %=====================A PLACEHOLDER FOR YOUR CODE========================================
    %To normalize the probability vector:
    
    PZt = dot(repmat(PZt_1', 4, 1), TRANS_HAT);
    
    PZt = PZt / sum(PZt);
    
    %Compute the emission probability
    %PEt = dot product of your emission probability matrix and PZt
    %=====================A PLACEHOLDER FOR YOUR CODE========================================
    PEt = dot(PZt, EMIS_HAT);
    %The prediction is done by sampling from distributions, i.e. the output value Xt is generated by sampling a state zt from P(Zt) and then from P(Xt|Zt = zt). 
    %You don't have to write any code but you should understand the process.
    n_samples = 100; %prediction results over 100 trials
    samples = mnrnd(n_samples, PEt)';
    samplesArray(:,t-100+1) = samples;
    accuracy(t-100+1) = samples(price_change(t+1))/n_samples;
end

mean(accuracy)
var(accuracy)